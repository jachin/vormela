// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Next$ReactTemplate = require("./Next.bs.js");
var Slides$ReactTemplate = require("./slides.bs.js");
var Previous$ReactTemplate = require("./Previous.bs.js");

function str(prim) {
  return prim;
}

function reducer(action, _) {
  return /* Update */Block.__(0, [/* record */[/* route */action[0]]]);
}

function mapUrlToRoute(url) {
  var match = url[/* path */0];
  if (match) {
    if (match[0] === "slide") {
      var match$1 = match[1];
      if (match$1) {
        if (match$1[1]) {
          return /* Slide */[0];
        } else {
          return /* Slide */[Caml_format.caml_int_of_string(match$1[0])];
        }
      } else {
        return /* Slide */[0];
      }
    } else {
      return /* Slide */[0];
    }
  } else {
    return /* Slide */[0];
  }
}

function currentSlide(slideIndex) {
  return Caml_array.caml_array_get(Slides$ReactTemplate.mySlideDeck, slideIndex);
}

var component = ReasonReact.reducerComponent("Page");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* route */0];
      var slideIndex = match[0];
      return React.createElement("div", undefined, React.createElement("div", undefined, Caml_array.caml_array_get(Slides$ReactTemplate.mySlideDeck, slideIndex), ReasonReact.element(/* None */0, /* None */0, Previous$ReactTemplate.make(slideIndex, /* array */[])), ReasonReact.element(/* None */0, /* None */0, Next$ReactTemplate.make(slideIndex, /* array */[]))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* route : Slide */[0]];
    });
  newrecord[/* reducer */12] = reducer;
  newrecord[/* subscriptions */13] = (function (self) {
      return /* :: */[
              /* Sub */[
                (function () {
                    return ReasonReact.Router[/* watchUrl */1]((function (url) {
                                  return Curry._1(self[/* send */4], /* ChangeRoute */[mapUrlToRoute(url)]);
                                }));
                  }),
                ReasonReact.Router[/* unwatchUrl */2]
              ],
              /* [] */0
            ];
    });
  return newrecord;
}

exports.str = str;
exports.reducer = reducer;
exports.mapUrlToRoute = mapUrlToRoute;
exports.currentSlide = currentSlide;
exports.component = component;
exports.make = make;
/* component Not a pure module */
